1. java内存模型
  java内存由下面几个部分组成 heap, stack, native stack, metaspace, code cache, pc register
  1) heap
     -Xmx 设置heap的最大值
     -Xms 设置heap的初始值
     heap又可以划分为下面两个部分
     1.1) young generation
          -Xmn 同时设置 young generation的初始值和最大值
          young generation又可以划分为下面三个个部分
          1.1.1) eden space
                 可以通过-XX:SurvivorRatio来设置eden space的大小.
                 比如 young generation有512MB, 且-XX:SurvivorRatio=n时, eden space的大小为 n/n+2 * 512MB
                 -XX:SurvivorRatio=n表示, eden space和survivor spaces按 n:1的比例来划分young generation的大小
                 而survivor spaces有两块, 所以 eden space的大小为 n/n+2 * 512MB
          1.1.2) survivor spaces 1
          1.1.2) survivor spaces 2
     1.2) old generation
  2) stack
     2.1) jvm每创建一个线程就会为其分配一个栈,
     2.2) 栈由栈帧组成, 每个栈帧存储的是当前线程调用过的函数的信息,
     2.3) 位于栈顶的栈帧存储的是当前线程正在执行的函数的信息
     2.4) 可以通过-Xss指定stack的大小, stack越大jvm能创建的线程数就越小
  3) native stack
     当线程调用native method时, jvm会为其分配native stack
  4) metaspace(java规范叫做method area, oracle使用metaspace来实现)
     4.1) jvm把加载过的类的信息, 字符串常量池等信息都存储在此
     4.2) 分配在native method, 即直接使用OS内存, 其大小由OS剩余内存决定
     4.3) -XX:MetaspaceSize 设置metaspace的初始值
     4.4) -XX:MaxMetaspaceSize 设置metaspace的最大值
  5) code cache
     5.1) jvm会把java方法编译为本地代码, 并存放在code cache
           当code cache没有空间时, jvm会停止优化将java方法编译为本地代码
     5.2) -XX:ReservedCodeCacheSize 设置code cache的最大值
     5.3) -XX:UseCodeCacheFlushing 当设为true时会在code cache满时进行清理, 默认为false
     5.4) –XX:+PrintCodeCache 打印code cache使用的情况
  6) pc register
     6.1) jvm每创建一个线程就会为其分配一个pc register
     6.2) 存放者当前线程将要执行的指令
 例子: java -Xmx1g -Xms1g \                  # 设置heap的初始值和最大值为1g
           -Xmn512m -XX:SurvivorRatio=100 \ # 设置heap中的young generation大小为512m, 并设置young generation中的edge大小为 (100/(100 + 2)) * 512MB
           -XX:MetaspaceSize=256m -XX:MaxMetaspaceSize=256m \ # 设置MetaspaceSize的初始值和最大值为256m
           -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:/root/Desktop/gc.log \ # 开启gc log并打印到指定的文件中
           -jar  /root/workspace/back/hobbit/hobbit-chat-1.0-SNAPSHOT.jar

 参考文档:
 https://aboutcoding.blog/2017/11/01/java7-memory-model/
 https://docs.oracle.com/cd/E19900-01/819-4742/abeik/index.html(-XX:SurvivorRatio)

 2. gc的触发
                               edge
             young generation
                               survivor
       heap
             old generation

       1.1) 所有新生的对象都会在edge上分配空间
       1.2) 当young generation中的edge没有空间时, 会触发minor gc
       1.3) 当old generation没有空间时, 会触发full gc
       1.3) 当metaspace没有空间时, 会触发full gc
       1.5) gc一般都会暂停应用线程, 即触发Stop the world事件

 3. gc的算法
   gc主要分为下面三种算法, 它们的第一步都是去标记还需要继续存活的对象
   1) mark-sweep
      1.1) 将未标记的对象所占的空间视作可以被重新分配的空间, 需要维护被标记的对象的信息
      1.2) 缺点是会形成内存碎片
   2) mark-sweep-compact
      2.1) 将标记的对象统一放到一起, 从而可以消灭内存碎片
      2.2) 缺点是移动标记的对象会增加gc的时间
   3) mark-copy
      3.1)和mark-sweep-compact类似, 唯一的区别是它是用空间来换时间
      3.2)当edge发生gc时, 它会一边标记edge中还需要存活的对象,
          一边把标记好的对象转移到某一个survivor中去, 这两步是可以并发执行的所以说它是以空间换时间

4. gc调优的目的
   1) 减少gc发生的次数
      1.1) 我们可以通过加大edge区的大小
      1.2) 我们可以尽量少生成新的对象, 比如缓存对象
   2) 减少gc所需的时间
      2.1) gc大部分的时间都浪费在标记还需要存活对象和转移这些存活对象上
           所以我们尽量减少存活对象的个数就可以减少gc所需的时间

 参考文档:
    https://plumbr.io/handbook/garbage-collection-algorithms