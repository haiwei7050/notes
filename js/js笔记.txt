1、prototype与[[prototype]]
  a、Function与Boolean、Number一样都是Object的子类
  
  b、var A = function(){};
     相当于生成了一个Function的实例对象
  
  c、prototype是Function特有的一个属性，所以（！！ Function 特有的  ！！）

     {}.prototype                 // undefined  {}类似new Object()
     new Number(1).prototype      // undefined
     new Boolean(true).prototype  // undefined
     
     function g(){}
     g.prototype                  // 不是undefined

     var f = function (){};
         f.prototype              // 不是undefined, 这个对象是js引擎自动生成的

  d、[[prototype]]是每个对象都有  (!! 所有对象都有 ！！)

     当你使用下列语法创建对象时

     function Car(){              // 这是Function的一个实例，它有prototype属性

     }

     var car1 = new Car();       // 当使用 <new 构造函数()>创建对象时
                                 // car1会有一个属性 [[prototype]]
                                 // 这个属性的指向的就是 构造函数的 prototype 所指向的那个对象

     Object.getPrototypeOf(car1) === Car.prototype   // true

     // 属性 [[prototype]] 不能直接访问，必须通过Object.getPrototypeOf(）才能访问
     // 属性 [[prototype]] 所有对象都有
     // 属性 prototype 可以直接访问，且只有Function的对象实例才有
        
        下面有两个函数，名字为A和B，它们都是Function的对象实例，只有它们才有属性prototype，
        而通过它们构建的对象则没有属性prototype，而有属性[[prototype]]

        function A(){}  // 有属性prototype
        new A()         // 没有属性prototype 有属性[[prototype]] 它指向prototype指向的对象

        var B = function (){} //有属性 prototype
        new B()         // 没有属性prototype 有属性[[prototype]] 它指向prototype指向的对象

2、instanceof怎么用
   
   function P(){
	
   }
   var p1 = new P();
   
   console.log(Object.getPrototypeOf(p1) === P.prototype);     // true
   console.log(p1 instanceof P);                               // true

   P.prototype = {}                                            // 令P.prototype指向一个新对象，
                                                               // 而该对象不在p1的prototype chain中
                                                               // 所以 下面两个都为false; 

   console.log(Object.getPrototypeOf(p1) === P.prototype);     // false
   console.log(p1 instanceof P);                               // false

     
     p1 instanceof P, 是看P.prototype所指向的对象是否在p1的prototype chain中, 

     p1的prototype chain如下图所示
    
      p1.[[prototype]] ---> P.prototype ---> Object.prototype ---> null
       

     1) p1由P构造而来，所以p1.[[prototype]] 指向 P.prototype所指向的对象
     
     2) 因为P.prototype所指向的对象是个普通的对象，
        所以p1.[[prototype]].[[prototype]]
        指向的是 Object.prototype所指向的对象

     3) 而Object.prototype所指向的对象的就到头了，
        所以p1.[[prototype]].[[prototype]].[[prototype]]等于null

     
     p1是普通对象，有属性[[prototype]]，没有属性prototype
     
     P是函数对象，有属性prototype (仅函数对象才有该属性，函数对象指的是Function的实例，
                                即咱们定义的函数如function A(){}; var A = function (){})

     p1 是否是 P的实例，就是看P的属性prototype，是否在p1的prototype chain中，算法就是下面的这个函数
     
     function test(instance, Clazz){
       var temp = Object.getPrototypeOf(instance);
       while(temp && temp != Clazz.prototype){
          temp = Object.getPrototypeOf(temp);
      }
       return !!temp;
     }

     test(p1, P);
     

    参考链接
    https://javascriptrefined.io/function-and-object-instances-of-each-other-1e1095d5faac
    https://stackoverflow.com/questions/24453301/how-does-instanceof-work-in-javascript


3、setTimeout和setInterval的原理
   a、语法
      setTimeout(code|fun, delay, [arg1, arg2,....,argn])  
      setInterval(code|fun, delay, [arg1, arg2,....,argn])  
      
      "code|fun"                是要执行的代码或函数
      "delay"                   指定推后多少秒执行
      "[arg1, arg2,....,argn]"  这些参数会传给前面的函数

  b、原理
     1) 将 “code|fun”变为下面对象，塞进队列中
        var task = {
         "work": code| func,
         "executeTime":当前时间+delay //当前时间就是调用setTimeout or setInterval的时间点
        }
        queue.push(task);
     2) 在下次事件循环中，轮询队列，执行到达执行时间的函数
        var now = Date.now();
        queue.forEach(function(task){
          if(now - task.executeTime >= 0){
              task.work();
          }
        });

4、实现类似java中的sleep函数
   function sleep(ms){
     var start = Date.now();
     while(Date.now()- start < ms);
   }

5、变量结构赋值
   
   基本语法: http://es6.ruanyifeng.com/#docs/destructuring

   var rs = [[1,2], [3,4]].map(([x, y]) => x + y);
   
   等价于:
   
   1) js伪代码
   function myMap([x, y]){  //这个表明函数接收数组为参数
     return x + y;
   }

   [[1,2], [3,4]].map(myMap);

   2) java伪代码
   List<List> source = new ArrayList();
   List des = new ArrayList();
   for(List e : source){
      Object newVal = map(e);
      des.add(newVal);
   }

   void int map(List arr){
     int x = arr.get(0);
     int y = arr.get(1);
     return x + y;
   }

6、Object.keys(), Object.getOwnPropertyNames(), Object.getOwnPropertySymbols(), for in 
   1) Object.keys()                  // 只遍历 <自身> 的属性，且属性必须是 <可枚举> 的
      Object.getOwnPropertyNames()   // 只遍历 <自身> 的属性, 包括 <可枚举> 和 <不可枚举>
      Object.getOwnPropertySymbols() // 返回对象的通过Symbol定义的属性

      例子
      let o = {};
      Object.defineProperty(o, "noEnumerable", {
          value: 1,
          enumerable: false
      });

      Object.defineProperty(o, 'enumerable', {
         value: 2,
         enumerable: true
      });

      // 属性名              值
      o[Symbol.iterator] = 'Symbol';

      let keys_1 = Object.keys(o);
      let keys_2 = Object.getOwnPropertyNames(o);
      let keys_3 = Object.getOwnPropertySymbols(o);

      console.log(`Object.keys = ${keys_1}`);                   // Object.keys = enumerable

      console.log(`Object.getOwnPropertyNames = ${keys_2}`);    // Object.getOwnPropertyNames = noEnumerable,enumerable

      console.log(`Object.getOwnPropertySymbols = ${keys_3}`);  // Object.getOwnPropertySymbols = Symbol(Symbol.iterator)
  
  2) for in 可以遍历 <自身> 和其 <父类> 的 <可枚举> 属性
     function Parent(){
     }
     Parent.prototype.tostring = function(){
         console.log("tostring");
     }
     let o = new Parent();
     o.enumerable = 1;
     for(let key in o){
         console.log(key)            //  enumerable, tostring
     }
      
 7、全局变量
   1) 浏览器脚本
      var a = 1;
      console.log(`window.a = ${window.a}`); // window.a = 1
   2) node 
      REPL(命令行下,直接敲node进入)
        var a = 1;
        console.log(`global.a = ${global.a}`); // global.a = 1
	
   **** 脚本中(node index.js) *******
        var a = 1;
        console.log(`global.a = ${global.a}`); // global.a = undefined
   这是因为node在执行脚本时,会把脚本包在一个方法中, 所以脚本中的全局变量并不是绑定到global上去的
   
   参考链接: https://stackoverflow.com/questions/34967530/about-global-variables-in-node-js
 
 8、this和arrow function
   let o = {
       name: 'z3',
       p: () => console.log(this)
   }
   o.p();  // node命令行和浏览器中运行结果为 global和 window, node脚本中运行时为空对象{}
   这是因为 arrow function 的this 是继承parent scope的this,
   node命令行的this       global                  // 直接在命令行敲node进入命令行模式
   浏览器中的this         window            
   node脚本中的this       {}                      //  node index.js
   
   参考链接 https://www.codementor.io/@dariogarciamoya/understanding-this-in-javascript-with-arrow-functions-gcpjwfyuc
   
   9、let|const 和 var在声明全局变量时的区别
     let|const声明的全局变量不会绑定到window或global上, 而var会
     所以
     let name = 'zs' 
     // var name = 'z3'
     function a(){
        console.log(this.name); 
     }
     
     a() // 能看到var定义的name而看不到let定义的name, 注意this指向的window或global
     
     参考链接: https://stackoverflow.com/questions/28776079/do-let-statements-create-properties-on-the-global-object
  
  10、document.readyState的值与事件DOMContentLoaded, 事件load的关系
      1) document.readyState 只能取下面三种值
         loading
	 interactive    ---> 当 DOMContentLoaded 事件触发时
	 complete       ---> 当 load 事件触发时
	 
	 loading
	   当前页面的标签还没有解析完
	 
	 interactive
	   当前页面的DOM树已经生成完, 可以使用docuement.getElementById获取DOM元素
	   但是iframe的页面, srcipt引用的外部脚本, 以及引用的外部css还没有加载完成
	 
	 complete 
	    网页和所有外部资源已经结束加载，load事件即将触发
	 参考链接: https://wangdoc.com/javascript/events/common.html#%E7%BD%91%E9%A1%B5%E7%8A%B6%E6%80%81%E4%BA%8B%E4%BB%B6
	          https://wangdoc.com/javascript/dom/document.html 搜document.readyState
      2) 几个例子
         <html>
            <head>
	      <script>
	         console.log(`${document.readyState}`);          // loading
		 console.log(`${document.getElementById('p1')}`) // null
              </script>
	    </head>
	    <body>
	       <p id='p1'>script放在head里的情况</p>
	    </body>
	 </html>
	 
	 
	  <html>
            <head>
	    </head>
	    <body>
	       <p id='p1'>script放在 *中间* 的情况</p>
	       <script>
	         console.log(`${document.readyState}`);          // loading
		 console.log(`${document.getElementById('p1')}`) // p1
		 console.log(`${document.getElementById('p2')}`) // null
               </script>
	        <p id='p2'>我在script后面</p>
	    </body>
	 </html>
         
	 
	<html>
            <head>
	    </head>
	    <body>
	       <p id='p1'>script放在 *中间* 的情况</p>
	       <script>
	         console.log(`${document.readyState}`);              // loading
		 window.addEventListener('DOMContentLoaded', () => {
		     console.log(`${document.readyState}`);          // interactive
		 });
		 window.addEventListener('load', () => {
		     console.log(`${document.readyState}`);          // complete
		 });
               </script>
	    </body>
	 </html>
	 
      3) window.addEventListener 和 docuement.addEventListener的区别
         window.addEventListener    把事件监听函数绑定到window上, 而
	 docuement.addEventListener 把事件监听函数绑定到docuement上.
	 当绑定的事件可以冒泡传播时,
	 会先调用docuement上面的监听函数, 然后
	 调用window上面的监听函数, 比如 DOMContentLoaded事件


11. js的正则表达式

  1) js的正则表达式 是部分匹配的

     /a/.test('a')  // true
     
     /a/.test('ba')  // true

     /a/.test('aca')  // true

     下面就是一个容易犯的错, 用正则表达式抓取
      协议 主机 端口

      /https?:\/\/[^/:]+(:\d{2,4})?/   这是一个错误的正则,因为

      http://a: 也会返回true, 因为正则表达式部分匹配了http://a

      要想达到完全匹配应该用, ^$来规定边界

      /^https?:\/\/[^:/](:\d{2,4})?$/


12. typeof vs Object.prototype.toString()
      js共有7种类型: number, boolean, string, null, undefined, object, symbol
    12.1) typeof判断数据类型
          
          typeof 1                -->  number
          typeof new Number(1)    -->  object
          

          typeof null             -->  object
          typeof undefined        -->  undefined
          
          function a(){}
          typeof a                --> function

          typeof []               --> object 
    
    12.2) typeof 最佳实践
          function a(v){
            // let b = v || '默认值'; 当v赋值为false时，这里就会错误的给b赋予 '默认值'
            let b  = v;
            if(typeof b == 'undefined' || b === null){
               b = '默认值'
            }
          }

    12.3) Object.prototype.toString.call(v)判断数据类型 
           [object Number] Number是构造函数的名字            
           
            v                    type
            1                    [object Number]
            undefined            [object Undefined]
            null                 [object Null]

13. 自动转换为false的类型
    null, undefined, '', 0, false

14. 箭头函数的返回值
     let a = val => val * 5;   // 这样写 隐含函数a的返回是 val * 5
     let a = val => { val *5 } // 这样写 返回undefined, 必须显示的加上return

15. CORS 请求详解
    1. 简单请求
       浏览器： 增加一个请求头origin,                             origin: http://192.30.0.231:8081
       服务器: 增加一个响应头Access-Control-Allow-Origin,         Access-Control-Allow-Origin: http://192.30.0.231:8081(or *)

    2. 非简单请求
        浏览器发两次请求:
           preflight request: 1 请求方法必须为OPTIONS, 新增请求头origin, Access-Control-Request-Method
           后续请求:  新增请求头 origin
        服务器: 对preflight request的响应, 新增响应头Access-Control-Allow-Origin, Access-Control-Request-Method
    3. 例子
        1)浏览器发起的preflight request
           OPTIONS /user/view/1 HTTP/1.1
           Origin: http://192.30.0.231:8081
           Access-Control-Request-Method: PUT

        2) 服务器对preflight request的响应
           HTTP/1.1 200 OK
           Access-Control-Allow-Origin: http://192.30.0.231:8081(or *)
           Access-Control-Allow-Methods: GET, POST, PUT (必须包含Access-Control-Request-Method的值)
    4. 注意 origin 字段是有 协议 + 域名 + 端口
       origin: http://192.30.0.231:8018    合法
       origin: 192.30.0.231:8018           不正确

16. ArrayBuffer

  1)简介
    ArrayBuffer只负责分配内存.
    UintXArray, IntXArray以X大小的字节读写ArrayBuffer分配的内存(X代表8, 16, 32).
    DataView用getIntX(setIntX), getUintX(setIntX)以X大小的字节读写ArrayBuffer分配的内存.

    Uint8Array                             无符号1字节整数
    Uint16Array                            无符号2字节整数
    Int8Array                              有符号1字节整数

    // 分配1字节的内存
    const buff = new ArrayBuffer(1);

    // 读写内存
    const a1 = new Uint8Array(buff);
    console.log(a1[0]);        // 读内存
    a1[0] = 1;                 // 写内存, js默认使用小端方式(little-endina)进行写内存, 见下面附录2

  2)例子
    const buffer = new ArrayBuffer(2);      //申请2字节内存
    const b1 = new Uint8Array(buffer);      //Uint8Array, 每次可以1个字节的大小读写上面的内存
    b1[0] = 1;                              // 在上面2字节内存中的 高位 地址写入1    0000 0000 0000 0001  0x0001
    b1[1] = 2;                              // 在上面2字节内存中的 低位 地址写入2    0000 0010 0000 0001  0x0201
    const b2 = new Uint16Array(buffer);     //Uint16Array, 每次可以2个字节的大小读写上面的内存
    console.log(b2[0]);                     // 一次读取2个字节, 0x0201

17. XMLHttpRequest的基本用法
       var xhr = new XMLHttpRequest();
       var body = null;
       xhr.onreadystatechange = callback;
       xhr.open('GET', 'http://localhost:8080/user');
       xhr.send(body);

       function callback(){
         //callback的this默认绑定的是xhr对象
         if(this.readyState == 4){
            //请求已完成
         }
       }
      注意: **** callback的this默认绑定的是xhr对象  ****

18. XMLHttpRequest的readyState
     1) XMLHttpRequest.readyState
        取值   代码
        0    var xhr = new XMLHttpRequest()   表示 XMLHttpRequest 实例已经生成, 但是实例的open()方法还没有被调用
        1    xhr.open()                       表示open()方法已经调用, 但是实例的send()方法还没有调用
        2    xhr.send()放置的定时任务           send()方法已经调用, *** 并且服务器返回的头信息和状态码已经收到 ***
        3    xhr.send()放置的定时任务           表示正在接收服务器传来的数据体
        4    xhr.send()放置的定时任务           表示服务器返回的数据已经完全接收, *** 或者本次接收已经失败 ***

     2) open()与readyState以及xhr.onreadystatechange的关系
         2.1) 将readyState 从 1 => 0
         2.2) 直接在方法中调用xhr.onreadystatechange设置的回调函数
         *** 请注意, 重复调用open可以起到终止第一次发出ajax请求
             xhr.open();
             xhr.send();
             xhr.open(); // 这次open会终止掉前面的请求

     3) send()与readyState以及xhr.onreadystatechange的关系
        3.1) send方法中不修改readyState的值, 也不调用xhr.onreadystatechange设置的回调函数
        3.2) 在send()放置的定时任务, 会修改readyState的值,并调用xhr.onreadystatechange设置的回调函数
        3.3) 定时任务分为两部分:
             a) 创建一个HTTP请求, 并交给后台线程执行,
                    即下面伪代码中的submit(request).

             b) 用setTimeout设置一个定时任务, 该定时任务在main线程中运行.
                    即下面伪代码中的setTimeout(cb, 0).

             注意: a)的HTTP请求,它是在后台线程中运行,
                  会和各种UI操作并行执行, 比如会和鼠标,键盘的回调函数并行执行
                  而b)设置的定时任运行在main线程中, 所以它和UI事件
                  比如鼠标,键盘的回调函数同一时间只有一个能运行

             注意: b)设置的定时任务负责下面操作
                  修改readyState的值,并调用xhr.onreadystatechange设置的回调函数
                   readyState: 1 => 2, 2 => 3, 3 => 4.
                   readyState修改时, 其他鼠标键盘的回调函数不会被执行
                   因为在它运行在main线程


        3.3) send方法放置的定时任务的伪代码如下
             var request = createRequest();
             submit(request);  // 可以和UI事件监听函数同时运行
             var cb = () => {
                 if(!request.done){
                   setTimeout(cb, 0)
                   return;
                 }
                 handle(2);
                 handle(3);
                 handle(4);
             };
             handle(xhr, state){
                if(xhr.hasErrors()) return;
                xhr.readyState = state;
                xhr.onreadystatechange()
             }
             setTimeout(cb, 0); // 同一时间, 它和UI事件监听函数只有一个可以运行

     4) abort()与readyState以及xhr.onreadystatechange的关系
        4.1) a.当readyState != 4 时, 令xhr.readyState = 4, xhr.status = 0
               并调用xhr.onreadystatechange设置的回调函数
             b.当readyState == 4 时, 令xhr.readyState = 0, xhr.status = 0
                此时不会调用回调函数

        4.2) abort调用的时机
             由上面3可知, send方法其实有两步:
             a) 发送HTTP请求
             b) 设置一个定时任务, 该定时任务检查HTTP请求是否完成
                如果完成就修改readyState, 并调用xhr.onreadystatechange设置的回调函数

             所以在b)之前, 此时xhr.readyState = 1, 调用xhr.abort()会按照4.1)a执行
             ***  xhr.readyState = 1, 是因为xhr.open()令其等于1

             所以在b)之后, 此时xhr.readyState = 4, 调用xhr.abort()会按照4.1)b执行
              ***  xhr.readyState = 4, 是因为b)会一口气修改xhr.readyState,
              从 1 => 2, 2 =>3, 3 => 4


参考文档: https://xhr.spec.whatwg.org

19.XMLHttpRequest.send(body)
   1)当使用HEAD或GET方法请求后台数据时
      send(body) 等价与  send(null);

   2) body常用类型及对应的content-type
     body                       content-type                        playload
     FormData                   multipart/form-data                 按照multipart/form-data进行编码
     URLSearchParams            application/x-www-form-urlencoded   按照application/x-www-form-urlencoded进行编码

20.XMLHttRequest.abort()的应用
   1)场景
      当用户连续触发两次请求req1, req2, 且req2的响应快于req1时
      req2的响应可能被延迟的req1的响应所覆盖
      此时就应该在发送第二次请req2求前执行req1.abort()
    2) 代码请看附录3
    *** 请注意, 重复调用open可以起到终止第一次发出ajax请求
    xhr.open();
    xhr.send();
    xhr.open(); // 这次open会终止掉前面的请求

   参考文档: https://xhr.spec.whatwg.org/#the-abort()-method
21. postMessage的用法
    1) 父向子发
       subWin.postMessage(data, origin);          //  subWin: 子窗口
                                                  //  origin: 子窗口的源(协议+主机名+端口)
    2) 子向父发
       parentWin.postMessage(data, origin);       //  parentWin: 父窗口
                                                  //  origin:    父窗口的源(协议+主机名+端口)
    3) 在父窗口监听子窗口的message事件
      window.addEventListener('message', e => {
         e.source                                // 子窗口的window对象
         e.origin                                // 子窗口的源
      });

22.Iterable, Iterator, Generator, async
   1) Iterable 和 Iterator
      一个可迭代的js对象,是指它有一个名为Symbol.iterator的属性
      且该属性是一个函数, 它的返回值是一个Iterator对象.
      下面就是一个可迭代的js对象
      let obj = {
         [Symbol.iterator]: function (){
            let iterator = {
               next: () = > {value: 1, done: false};
            }
            return iterator; //这里返回的就是Iterator对象, 它必须有个next方法
         }
      }

   2) Generator
      Generator函数返回的是一个可迭代的js对象
      function* m1(){
         let a = yield 1;
         let b = yield 2;
         console.log(a);
         console.log(b);
      }
      let a = m1();                    // a是一个可迭代的js对象, 即a[Symbol.iterator]是一个函数, 且它的返回值是一个Iterator对象
                                       // ***注意 a[Symbol.iterator] = () => a; 所以可以直接调用a.next();

      let step1 = a.next();            // 方法m1执行到yield 1, 并返回{value:!, done: false}, 注意还没有执行赋值语句 let a = ?
      let step2 = a.next(step1.value); // 方法m1执行 let a = step1.value = 1 和 yield 2, 并返回{value:2, done: false}, 注意还没有执行赋值语句 let b = ?
      let step3 = a.next(step2.value); // 方法m1执行 let b = step2.value = 2 和 两句打印语句, 并返回 {value:undefined, done: true}

   3) Generator 处理异步请求
      function* m1(){
         let a = yield new Promise(res => res(1));
         let b = yield new Promise(res => res(2));
         console.log(a);
         console.log(b);
      }
      let a = m1();
      let step1 = a.next();             // step1 = {value: new Promise(res => res(1)), done: false}
      step1.value.then(d => {
            let step2 = a.next(d);       // step2 = {value: new Promise(res => res(2)), done: false}
             step2.value.then(d => {
                  let step3 = a.next(d); // step2 = {value: undefined, done: truue}
             });
        });

   4) async
      async是Generator 处理异步请求, 简化处理的语法蜜糖

      async function m1(){
         let a = await new Promise(res => res(1));
         let b = await new Promise(res => res(2));
         return a+ b;
      }
      let resultPromise = m1();
      // 直接调用async方法就等于上面3)做的操作, 下面是详解
      4.1) 先运行 let a = await new Promise(res => res(1))
           这里的a等于res方法中传入的值, 这里是1
      4.2) 再运行 let b = await new Promise(res => res(2));
           这里的b等于res方法中传入的值, 这里是2
           ***注意 4.2和4.1是串行从上到下运行的
      4.3) async 返回的是Promise对象,
          它的then方法传入的是async方法最后return返回的值
   参考文档: https://es6.ruanyifeng.com/#docs/async

附录1 用google搜索指定网站
      关键词 site:https://wangdoc.com/
附录2 大端和小端的区别
      写入数据  0x1122 (16进制)
      大端                          小端
          地址  0        1               0          1
          数据  0x11     0x22            0x22       0x11
      1) 数据0x1122, 占2个字节, 其中高字节的数据是0x1100 低字节的数据是0x0022
         16进制最大是0xF(即15), 需要4bit来存储, 所以两个16进制的数据需要1Byte(8bit)来存储
      2) 将内存按字节划分为一个个小格子, 并给格子编号, 格子编号小的叫低地址, 格子编号大的叫高地址
      3) 小端, 将低字节的数据写到低地址, 高字节的数据写到高地址,  按一致的数据存储文件
      4) 大端, 将低字节的数据写到高地址, 高字节的数据写到低地址,  按相反的顺序存储
附录3
        <p id="content">还未请求</p>
        <button id="btn1">发送请求1</button>
        <br>
        <button id="btn2">发送请求2</button>
        <br>
        <script>
            const btn1 = document.getElementById('btn1');
            const btn2 = document.getElementById('btn2');
            const content = document.getElementById('content');
            const server = 'http://192.30.0.231:8080';
            let xhr = null;
            let i = 1;
            btn1.addEventListener('click', () => {
                sendRequest(server + '/xh1', updateContent);
            });

            btn2.addEventListener('click', () => {
                sendRequest(server + '/xh2', updateContent);
            });
            function sendRequest(api, callback, method) {
                if(xhr){
                    //xhr.abort() 放开注释就可以解决问题
                }
                let methodToUse = method || 'GET';
                xhr = new XMLHttpRequest();
                xhr.open(methodToUse, api);
                xhr.onreadystatechange = createCallback(xhr, callback);
                xhr.send();
            }
            function createCallback(xhr, callback) {
                return () => {
                    if (xhr.readyState == 4 && xhr.status == 200) {
                        const data = xhr.responseText;
                        callback(data);
                    }
                }
            }
            function updateContent(data) {
                content.innerText = data;
            }
        </script>